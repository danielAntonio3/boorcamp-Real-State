type Query {
  getHouse(_id: ID!): House
  getFullHouse(limit: Int!, skip: Int!): [House]
  filterHouse(limit: Int!, skip: Int!, payload: UpdateHouseInput): [House]
}

type Service {
  kitchen: Boolean
  parking: Boolean
  patio: Boolean
  wifi: Boolean
  tv: Boolean
  airConditioner: Boolean
  smockingArea: Boolean
}

type House {
  _id: String
  country: String
  state: String
  city: String
  street: String
  number: Int
  zipCode: Int
  price: Int
  rooms: Int
  bathrooms: Int
  animals: Boolean
  rating: Float
  img: String
  services: [Service]
}

input ServiceInput {
  kitchen: Boolean!
  parking: Boolean!
  patio: Boolean!
  wifi: Boolean!
  tv: Boolean!
  airConditioner: Boolean!
  smockingArea: Boolean!
}

input HouseInput {
  country: String!
  state: String!
  city: String!
  street: String!
  number: Int!
  zipCode: Int!
  price: Int!
  rooms: Int!
  bathrooms: Int!
  animals: Boolean!
  rating: Float
  img: String!
  services: [ServiceInput!]!
}

input UpdateServiceInput {
  kitchen: Boolean
  parking: Boolean
  patio: Boolean
  wifi: Boolean
  tv: Boolean
  airConditioner: Boolean
  smockingArea: Boolean
}

input UpdateHouseInput {
  country: String
  state: String
  city: String
  street: String
  number: Int
  zipCode: Int
  price: Int
  rooms: Int
  bathrooms: Int
  animals: Boolean
  rating: Float
  img: String
  services: [UpdateServiceInput]
}

type Mutation {
  createHouse(house: HouseInput): House
  updateHouse(_id: ID!, house: UpdateHouseInput): House
  deleteHouse(_id: ID!): String
}
